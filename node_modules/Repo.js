var fs = require('fs');
var exec = require('child_process').exec;
var execSync = require('child_process').execSync;

var Repo = new function(){

	this.reg = /^[a-zA-Z0-9\.\-\_]+$/;
	this.repoList = [];
	
	var log = [];
	this.setLog = function(text){log.push(text);}
	this.getLog = function(){
		var ret=log;
		log=[];
		return ret;
	}

	this.getLocalRepos = function(){
		var resp=[];
		var dir = fs.readdirSync(this.repoPath);
		for(i=0;i!=dir.length;i++){
			var stat = fs.statSync(this.repoPath+dir[i]);
			stat && stat.isDirectory() ? resp.push(dir[i]) : false;
		}
		return resp;
	}

	this.clone = function(repoName){
		try{
			repoName.match(this.reg) ? [
				stdout=execSync('git clone '+this.remoteUser+'@'+this.remoteAddr+':'+repoName+' '+this.repoPath+repoName),
				this.setLog(stdout)
			] : this.setLog('Clone: repoName is bad.'); 
		}
		catch(e){this.setLog('Clone: repoName not found.');}
	}

	this.pull = function(repoName){
		if(repoName.match(this.reg)){
			var self=this;
			var saveDir=process.cwd();
			process.chdir(this.repoPath+repoName);
			var repoDir=process.cwd();
			process.chdir(saveDir);
			exec('git commit -am "fix changes"',{cwd:repoDir},function(error,stdout,stderr){
				self.setLog('1.commit "fix changes"\r\n'+stdout);
				exec('git pull --no-edit',{cwd:repoDir},function(error,stdout,stderr){
				self.setLog('2.pull\r\n'+stdout);
					stdout.match(/CONFLICT/) ?
						exec('git push origin master:fixme && git reset --hard',{cwd:repoDir},function(error,stdout,strerr){
							self.setLog('Match CONFLICT. See state in origin/fixme.\r\n'+stdout);
						})
					: self.pushToBack && exec('git push origin master',{cwd:repoDir},function(error,stdout,stderr){
						self.setLog('Pushing back this state.\r\n'+stdout);
					});
				});
			});
		}
		else this.setLog('repoName is bad.'); 
	}
}

module.exports=Repo;
